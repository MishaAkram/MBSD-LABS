
lab10Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ea  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000654  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00001549  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <avr/io.h>
#define F_CPU 1000000UL
#include<util/delay.h>
int main(void)
{
	DDRD&=~(1<<PD0);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	81 bb       	out	0x11, r24	; 17
	DDRD|=(1<<PD1);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	82 60       	ori	r24, 0x02	; 2
  92:	81 bb       	out	0x11, r24	; 17
	DDRA=0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
  98:	84 bb       	out	0x14, r24	; 20
	//int UBRR_Value=25;
	//UBRR0H=(unsigned char)(UBRR_Value>>8);
	//UBRR0L=(unsigned char)UBRR_Value;
	UBRR0H=0x00;
  9a:	10 bc       	out	0x20, r1	; 32
	UBRR0L=0x05;
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	89 b9       	out	0x09, r24	; 9
	UCSR0B=(1<<RXEN0);
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=(1<<USBS0)|(3<<UCSZ00);
  a4:	8e e0       	ldi	r24, 0x0E	; 14
  a6:	80 bd       	out	0x20, r24	; 32
unsigned char receiveData;
while(1)
{ PORTC=0;
  a8:	15 ba       	out	0x15, r1	; 21
	receiveData=0;
	while(!(UCSR0A&(1<<RXC0)));
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x22>
	receiveData=UDR0;
  ae:	8c b1       	in	r24, 0x0c	; 12
	PORTC=receiveData;
  b0:	85 bb       	out	0x15, r24	; 21
	if(receiveData==0b11110000)
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	c9 f7       	brne	.-14     	; 0xa8 <main+0x20>
	{
		PORTA^=(1<<PA0);
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	89 27       	eor	r24, r25
  bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e3       	ldi	r18, 0x3F	; 63
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x3c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x46>
  ce:	00 00       	nop
  d0:	eb cf       	rjmp	.-42     	; 0xa8 <main+0x20>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
